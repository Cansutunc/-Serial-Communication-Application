CCS PCM C Compiler, Version 5.015, 5967               17-May-21 17:56

               Filename:   C:\Users\asus\Desktop\Microcontrollers experiment4\CASE1\Case_1 procedure_1\case_1 procedure_1reader.lst

               ROM used:   1064 words (13%)
                           Largest free fragment is 2048
               RAM used:   20 (5%) at main() level
                           38 (10%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3C0
0003:  NOP
.................... #include  <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA F3,30
0005:  DATA F9,34
0006:  DATA A0,12
0007:  DATA EC,3A
0008:  DATA 00,00
0009:  DATA 0C,2B
000A:  DATA 61,36
000B:  DATA F5,32
000C:  DATA BD,12
000D:  DATA EC,3A
000E:  DATA 00,00
*
00B4:  MOVF   00,F
00B5:  BTFSC  03.2
00B6:  GOTO   0CA
00B7:  CLRF   2F
00B8:  MOVF   04,W
00B9:  MOVWF  2E
00BA:  BCF    2F.0
00BB:  BTFSC  03.7
00BC:  BSF    2F.0
00BD:  MOVF   00,W
00BE:  BTFSS  0C.4
00BF:  GOTO   0BE
00C0:  MOVWF  19
00C1:  MOVF   2E,W
00C2:  MOVWF  04
00C3:  BCF    03.7
00C4:  BTFSC  2F.0
00C5:  BSF    03.7
00C6:  INCF   04,F
00C7:  BTFSC  03.2
00C8:  INCF   05,F
00C9:  GOTO   0B4
00CA:  BCF    0A.3
00CB:  BCF    0A.4
00CC:  GOTO   3EA (RETURN)
*
0140:  MOVF   37,W
0141:  XORWF  39,W
0142:  ANDLW  80
0143:  MOVWF  3B
0144:  BTFSS  37.7
0145:  GOTO   14B
0146:  COMF   36,F
0147:  COMF   37,F
0148:  INCF   36,F
0149:  BTFSC  03.2
014A:  INCF   37,F
014B:  BTFSS  39.7
014C:  GOTO   152
014D:  COMF   38,F
014E:  COMF   39,F
014F:  INCF   38,F
0150:  BTFSC  03.2
0151:  INCF   39,F
0152:  MOVLW  10
0153:  MOVWF  3A
0154:  CLRF   77
0155:  CLRF   7A
0156:  RRF    37,F
0157:  RRF    36,F
0158:  BTFSS  03.0
0159:  GOTO   160
015A:  MOVF   38,W
015B:  ADDWF  77,F
015C:  BTFSC  03.0
015D:  INCF   7A,F
015E:  MOVF   39,W
015F:  ADDWF  7A,F
0160:  RRF    7A,F
0161:  RRF    77,F
0162:  RRF    79,F
0163:  RRF    78,F
0164:  DECFSZ 3A,F
0165:  GOTO   156
0166:  BTFSS  3B.7
0167:  GOTO   16D
0168:  COMF   78,F
0169:  COMF   79,F
016A:  INCF   78,F
016B:  BTFSC  03.2
016C:  INCF   79,F
*
0203:  MOVF   0B,W
0204:  MOVWF  2F
0205:  BCF    0B.7
0206:  BSF    03.5
0207:  BSF    03.6
0208:  BSF    0C.7
0209:  BSF    0C.0
020A:  NOP
020B:  NOP
020C:  BCF    03.5
020D:  BCF    03.6
020E:  BTFSC  2F.7
020F:  BSF    0B.7
0210:  BTFSC  03.0
0211:  GOTO   23B
0212:  BSF    03.6
0213:  MOVF   0C,W
0214:  ANDLW  7F
0215:  BCF    03.6
0216:  MOVWF  2F
0217:  BSF    03.6
0218:  MOVF   0D,W
0219:  BCF    03.6
021A:  MOVWF  30
021B:  BSF    03.6
021C:  MOVF   0F,W
021D:  BCF    03.6
021E:  MOVWF  31
021F:  MOVF   2F,W
0220:  BTFSS  0C.4
0221:  GOTO   220
0222:  MOVWF  19
0223:  MOVF   30,W
0224:  BSF    03.6
0225:  MOVWF  0D
0226:  BCF    03.6
0227:  MOVF   31,W
0228:  BSF    03.6
0229:  MOVWF  0F
022A:  BCF    03.6
022B:  MOVF   0B,W
022C:  MOVWF  32
022D:  BCF    0B.7
022E:  BSF    03.5
022F:  BSF    03.6
0230:  BSF    0C.7
0231:  BSF    0C.0
0232:  NOP
0233:  NOP
0234:  BCF    03.5
0235:  BCF    03.6
0236:  BTFSC  32.7
0237:  BSF    0B.7
0238:  DECFSZ 2E,F
0239:  GOTO   23B
023A:  GOTO   25B
023B:  BSF    03.6
023C:  RLF    0C,W
023D:  RLF    0E,W
023E:  ANDLW  7F
023F:  BCF    03.6
0240:  MOVWF  2F
0241:  BSF    03.6
0242:  MOVF   0D,W
0243:  BCF    03.6
0244:  MOVWF  30
0245:  BSF    03.6
0246:  MOVF   0F,W
0247:  BCF    03.6
0248:  MOVWF  31
0249:  MOVF   2F,W
024A:  BTFSS  0C.4
024B:  GOTO   24A
024C:  MOVWF  19
024D:  MOVF   30,W
024E:  BSF    03.6
024F:  MOVWF  0D
0250:  BCF    03.6
0251:  MOVF   31,W
0252:  BSF    03.6
0253:  MOVWF  0F
0254:  INCF   0D,F
0255:  BTFSC  03.2
0256:  INCF   0F,F
0257:  BCF    03.0
0258:  BCF    03.6
0259:  DECFSZ 2E,F
025A:  GOTO   203
025B:  BCF    0A.3
025C:  BCF    0A.4
025D:  GOTO   3FF (RETURN)
025E:  CLRF   36
025F:  MOVF   04,W
0260:  MOVWF  35
0261:  BCF    36.0
0262:  BTFSC  03.7
0263:  BSF    36.0
0264:  SWAPF  2F,W
0265:  IORLW  F0
0266:  MOVWF  31
0267:  ADDWF  31,F
0268:  ADDLW  E2
0269:  MOVWF  32
026A:  ADDLW  32
026B:  MOVWF  34
026C:  MOVF   2F,W
026D:  ANDLW  0F
026E:  ADDWF  32,F
026F:  ADDWF  32,F
0270:  ADDWF  34,F
0271:  ADDLW  E9
0272:  MOVWF  33
0273:  ADDWF  33,F
0274:  ADDWF  33,F
0275:  SWAPF  2E,W
0276:  ANDLW  0F
0277:  ADDWF  33,F
0278:  ADDWF  34,F
0279:  RLF    33,F
027A:  RLF    34,F
027B:  COMF   34,F
027C:  RLF    34,F
027D:  MOVF   2E,W
027E:  ANDLW  0F
027F:  ADDWF  34,F
0280:  RLF    31,F
0281:  MOVLW  07
0282:  MOVWF  30
0283:  MOVLW  0A
0284:  ADDWF  34,F
0285:  DECF   33,F
0286:  BTFSS  03.0
0287:  GOTO   284
0288:  ADDWF  33,F
0289:  DECF   32,F
028A:  BTFSS  03.0
028B:  GOTO   288
028C:  ADDWF  32,F
028D:  DECF   31,F
028E:  BTFSS  03.0
028F:  GOTO   28C
0290:  ADDWF  31,F
0291:  DECF   30,F
0292:  BTFSS  03.0
0293:  GOTO   290
0294:  MOVLW  30
0295:  MOVWF  04
0296:  BCF    03.7
0297:  MOVLW  07
0298:  ANDWF  35,W
0299:  BCF    35.6
029A:  ADDWF  04,F
029B:  MOVLW  34
029C:  SUBWF  04,W
029D:  BTFSC  03.2
029E:  BSF    35.6
029F:  MOVF   00,W
02A0:  MOVWF  77
02A1:  BTFSS  03.2
02A2:  GOTO   2AB
02A3:  BTFSC  35.6
02A4:  GOTO   2AB
02A5:  BTFSC  35.4
02A6:  GOTO   2B3
02A7:  BTFSC  35.3
02A8:  GOTO   2AB
02A9:  MOVLW  20
02AA:  GOTO   2AE
02AB:  BSF    35.3
02AC:  BCF    35.4
02AD:  MOVLW  30
02AE:  ADDWF  77,F
02AF:  MOVF   77,W
02B0:  BTFSS  0C.4
02B1:  GOTO   2B0
02B2:  MOVWF  19
02B3:  INCF   04,F
02B4:  BTFSS  35.6
02B5:  GOTO   29B
02B6:  BCF    0A.3
02B7:  BCF    0A.4
02B8:  GOTO   406 (RETURN)
*
02F7:  MOVF   0B,W
02F8:  MOVWF  2F
02F9:  BCF    0B.7
02FA:  BSF    03.5
02FB:  BSF    03.6
02FC:  BSF    0C.7
02FD:  BSF    0C.0
02FE:  NOP
02FF:  NOP
0300:  BCF    03.5
0301:  BCF    03.6
0302:  BTFSC  2F.7
0303:  BSF    0B.7
0304:  BTFSC  03.0
0305:  GOTO   32E
0306:  BSF    03.6
0307:  MOVF   0C,W
0308:  ANDLW  7F
0309:  BCF    03.6
030A:  MOVWF  2F
030B:  BSF    03.6
030C:  MOVF   0D,W
030D:  BCF    03.6
030E:  MOVWF  30
030F:  BSF    03.6
0310:  MOVF   0F,W
0311:  BCF    03.6
0312:  MOVWF  31
0313:  MOVF   2F,W
0314:  MOVWF  37
0315:  CALL   2CB
0316:  MOVF   30,W
0317:  BSF    03.6
0318:  MOVWF  0D
0319:  BCF    03.6
031A:  MOVF   31,W
031B:  BSF    03.6
031C:  MOVWF  0F
031D:  BCF    03.6
031E:  MOVF   0B,W
031F:  MOVWF  32
0320:  BCF    0B.7
0321:  BSF    03.5
0322:  BSF    03.6
0323:  BSF    0C.7
0324:  BSF    0C.0
0325:  NOP
0326:  NOP
0327:  BCF    03.5
0328:  BCF    03.6
0329:  BTFSC  32.7
032A:  BSF    0B.7
032B:  DECFSZ 2E,F
032C:  GOTO   32E
032D:  GOTO   34D
032E:  BSF    03.6
032F:  RLF    0C,W
0330:  RLF    0E,W
0331:  ANDLW  7F
0332:  BCF    03.6
0333:  MOVWF  2F
0334:  BSF    03.6
0335:  MOVF   0D,W
0336:  BCF    03.6
0337:  MOVWF  30
0338:  BSF    03.6
0339:  MOVF   0F,W
033A:  BCF    03.6
033B:  MOVWF  31
033C:  MOVF   2F,W
033D:  MOVWF  37
033E:  CALL   2CB
033F:  MOVF   30,W
0340:  BSF    03.6
0341:  MOVWF  0D
0342:  BCF    03.6
0343:  MOVF   31,W
0344:  BSF    03.6
0345:  MOVWF  0F
0346:  INCF   0D,F
0347:  BTFSC  03.2
0348:  INCF   0F,F
0349:  BCF    03.0
034A:  BCF    03.6
034B:  DECFSZ 2E,F
034C:  GOTO   2F7
034D:  BCF    0A.3
034E:  BCF    0A.4
034F:  GOTO   410 (RETURN)
0350:  CLRF   36
0351:  MOVF   04,W
0352:  MOVWF  35
0353:  BCF    36.0
0354:  BTFSC  03.7
0355:  BSF    36.0
0356:  SWAPF  2F,W
0357:  IORLW  F0
0358:  MOVWF  31
0359:  ADDWF  31,F
035A:  ADDLW  E2
035B:  MOVWF  32
035C:  ADDLW  32
035D:  MOVWF  34
035E:  MOVF   2F,W
035F:  ANDLW  0F
0360:  ADDWF  32,F
0361:  ADDWF  32,F
0362:  ADDWF  34,F
0363:  ADDLW  E9
0364:  MOVWF  33
0365:  ADDWF  33,F
0366:  ADDWF  33,F
0367:  SWAPF  2E,W
0368:  ANDLW  0F
0369:  ADDWF  33,F
036A:  ADDWF  34,F
036B:  RLF    33,F
036C:  RLF    34,F
036D:  COMF   34,F
036E:  RLF    34,F
036F:  MOVF   2E,W
0370:  ANDLW  0F
0371:  ADDWF  34,F
0372:  RLF    31,F
0373:  MOVLW  07
0374:  MOVWF  30
0375:  MOVLW  0A
0376:  ADDWF  34,F
0377:  DECF   33,F
0378:  BTFSS  03.0
0379:  GOTO   376
037A:  ADDWF  33,F
037B:  DECF   32,F
037C:  BTFSS  03.0
037D:  GOTO   37A
037E:  ADDWF  32,F
037F:  DECF   31,F
0380:  BTFSS  03.0
0381:  GOTO   37E
0382:  ADDWF  31,F
0383:  DECF   30,F
0384:  BTFSS  03.0
0385:  GOTO   382
0386:  MOVLW  30
0387:  MOVWF  04
0388:  BCF    03.7
0389:  MOVLW  07
038A:  ANDWF  35,W
038B:  BCF    35.6
038C:  ADDWF  04,F
038D:  MOVLW  34
038E:  SUBWF  04,W
038F:  BTFSC  03.2
0390:  BSF    35.6
0391:  MOVF   00,W
0392:  MOVWF  77
0393:  BTFSS  03.2
0394:  GOTO   39D
0395:  BTFSC  35.6
0396:  GOTO   39D
0397:  BTFSC  35.4
0398:  GOTO   3AF
0399:  BTFSC  35.3
039A:  GOTO   39D
039B:  MOVLW  20
039C:  GOTO   3A0
039D:  BSF    35.3
039E:  BCF    35.4
039F:  MOVLW  30
03A0:  ADDWF  77,F
03A1:  CLRF   2F
03A2:  MOVF   04,W
03A3:  MOVWF  2E
03A4:  BCF    2F.0
03A5:  BTFSC  03.7
03A6:  BSF    2F.0
03A7:  MOVF   77,W
03A8:  MOVWF  37
03A9:  CALL   2CB
03AA:  MOVF   2E,W
03AB:  MOVWF  04
03AC:  BCF    03.7
03AD:  BTFSC  2F.0
03AE:  BSF    03.7
03AF:  INCF   04,F
03B0:  BTFSS  35.6
03B1:  GOTO   38D
03B2:  BCF    0A.3
03B3:  BCF    0A.4
03B4:  GOTO   417 (RETURN)
03B5:  MOVF   78,W
03B6:  BTFSC  03.2
03B7:  GOTO   3BD
03B8:  MOVF   77,W
03B9:  MOVWF  00
03BA:  INCF   04,F
03BB:  DECFSZ 78,F
03BC:  GOTO   3B8
03BD:  BCF    0A.3
03BE:  BCF    0A.4
03BF:  GOTO   41E (RETURN)
....................  
.................... #list 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
*
03D4:  BCF    03.5
03D5:  CLRF   20
03D6:  CLRF   21
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
*
00CD:  CLRF   34
....................    sign = 0; 
00CE:  CLRF   32
....................    base = 10; 
00CF:  MOVLW  0A
00D0:  MOVWF  33
....................    result = 0; 
00D1:  CLRF   31
00D2:  CLRF   30
....................  
....................    if (!s) 
00D3:  MOVF   2E,W
00D4:  IORWF  2F,W
00D5:  BTFSS  03.2
00D6:  GOTO   0DB
....................       return 0; 
00D7:  MOVLW  00
00D8:  MOVWF  78
00D9:  MOVWF  79
00DA:  GOTO   200
....................    c = s[index++]; 
00DB:  MOVF   34,W
00DC:  INCF   34,F
00DD:  ADDWF  2E,W
00DE:  MOVWF  04
00DF:  BCF    03.7
00E0:  BTFSC  2F.0
00E1:  BSF    03.7
00E2:  MOVF   00,W
00E3:  MOVWF  35
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
00E4:  MOVF   35,W
00E5:  SUBLW  2D
00E6:  BTFSS  03.2
00E7:  GOTO   0F4
....................    { 
....................       sign = 1;         // Set the sign to negative 
00E8:  MOVLW  01
00E9:  MOVWF  32
....................       c = s[index++]; 
00EA:  MOVF   34,W
00EB:  INCF   34,F
00EC:  ADDWF  2E,W
00ED:  MOVWF  04
00EE:  BCF    03.7
00EF:  BTFSC  2F.0
00F0:  BSF    03.7
00F1:  MOVF   00,W
00F2:  MOVWF  35
....................    } 
00F3:  GOTO   101
....................    else if (c == '+') 
00F4:  MOVF   35,W
00F5:  SUBLW  2B
00F6:  BTFSS  03.2
00F7:  GOTO   101
....................    { 
....................       c = s[index++]; 
00F8:  MOVF   34,W
00F9:  INCF   34,F
00FA:  ADDWF  2E,W
00FB:  MOVWF  04
00FC:  BCF    03.7
00FD:  BTFSC  2F.0
00FE:  BSF    03.7
00FF:  MOVF   00,W
0100:  MOVWF  35
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
0101:  MOVF   35,W
0102:  SUBLW  2F
0103:  BTFSC  03.0
0104:  GOTO   1F1
0105:  MOVF   35,W
0106:  SUBLW  39
0107:  BTFSS  03.0
0108:  GOTO   1F1
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
0109:  MOVF   35,W
010A:  SUBLW  30
010B:  BTFSS  03.2
010C:  GOTO   12D
010D:  MOVF   34,W
010E:  ADDWF  2E,W
010F:  MOVWF  04
0110:  BCF    03.7
0111:  BTFSC  2F.0
0112:  BSF    03.7
0113:  MOVF   00,W
0114:  SUBLW  78
0115:  BTFSC  03.2
0116:  GOTO   121
0117:  MOVF   34,W
0118:  ADDWF  2E,W
0119:  MOVWF  04
011A:  BCF    03.7
011B:  BTFSC  2F.0
011C:  BSF    03.7
011D:  MOVF   00,W
011E:  SUBLW  58
011F:  BTFSS  03.2
0120:  GOTO   12D
....................       { 
....................          base = 16; 
0121:  MOVLW  10
0122:  MOVWF  33
....................          index++; 
0123:  INCF   34,F
....................          c = s[index++]; 
0124:  MOVF   34,W
0125:  INCF   34,F
0126:  ADDWF  2E,W
0127:  MOVWF  04
0128:  BCF    03.7
0129:  BTFSC  2F.0
012A:  BSF    03.7
012B:  MOVF   00,W
012C:  MOVWF  35
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
012D:  MOVF   33,W
012E:  SUBLW  0A
012F:  BTFSS  03.2
0130:  GOTO   180
....................       { 
....................          while (c >= '0' && c <= '9') 
0131:  MOVF   35,W
0132:  SUBLW  2F
0133:  BTFSC  03.0
0134:  GOTO   17F
0135:  MOVF   35,W
0136:  SUBLW  39
0137:  BTFSS  03.0
0138:  GOTO   17F
....................          { 
....................             result = 10*result + (c - '0'); 
0139:  CLRF   37
013A:  MOVLW  0A
013B:  MOVWF  36
013C:  MOVF   31,W
013D:  MOVWF  39
013E:  MOVF   30,W
013F:  MOVWF  38
*
016D:  MOVLW  30
016E:  SUBWF  35,W
016F:  ADDWF  78,W
0170:  MOVWF  30
0171:  MOVF   79,W
0172:  MOVWF  31
0173:  BTFSC  03.0
0174:  INCF   31,F
....................             c = s[index++]; 
0175:  MOVF   34,W
0176:  INCF   34,F
0177:  ADDWF  2E,W
0178:  MOVWF  04
0179:  BCF    03.7
017A:  BTFSC  2F.0
017B:  BSF    03.7
017C:  MOVF   00,W
017D:  MOVWF  35
017E:  GOTO   131
....................          } 
....................       } 
017F:  GOTO   1F1
....................       else if (base == 16)    // The number is a hexa number 
0180:  MOVF   33,W
0181:  SUBLW  10
0182:  BTFSS  03.2
0183:  GOTO   1F1
....................       { 
....................          c = toupper(c); 
0184:  MOVF   35,W
0185:  SUBLW  60
0186:  BTFSC  03.0
0187:  GOTO   18F
0188:  MOVF   35,W
0189:  SUBLW  7A
018A:  BTFSS  03.0
018B:  GOTO   18F
018C:  MOVF   35,W
018D:  ANDLW  DF
018E:  GOTO   190
018F:  MOVF   35,W
0190:  MOVWF  35
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
0191:  MOVF   35,W
0192:  SUBLW  2F
0193:  BTFSC  03.0
0194:  GOTO   199
0195:  MOVF   35,W
0196:  SUBLW  39
0197:  BTFSC  03.0
0198:  GOTO   1A1
0199:  MOVF   35,W
019A:  SUBLW  40
019B:  BTFSC  03.0
019C:  GOTO   1F1
019D:  MOVF   35,W
019E:  SUBLW  46
019F:  BTFSS  03.0
01A0:  GOTO   1F1
....................          { 
....................             if (c >= '0' && c <= '9') 
01A1:  MOVF   35,W
01A2:  SUBLW  2F
01A3:  BTFSC  03.0
01A4:  GOTO   1C2
01A5:  MOVF   35,W
01A6:  SUBLW  39
01A7:  BTFSS  03.0
01A8:  GOTO   1C2
....................                result = (result << 4) + (c - '0'); 
01A9:  RLF    30,W
01AA:  MOVWF  36
01AB:  RLF    31,W
01AC:  MOVWF  37
01AD:  RLF    36,F
01AE:  RLF    37,F
01AF:  RLF    36,F
01B0:  RLF    37,F
01B1:  RLF    36,F
01B2:  RLF    37,F
01B3:  MOVLW  F0
01B4:  ANDWF  36,F
01B5:  MOVLW  30
01B6:  SUBWF  35,W
01B7:  ADDWF  36,W
01B8:  MOVWF  78
01B9:  MOVF   37,W
01BA:  MOVWF  7A
01BB:  BTFSC  03.0
01BC:  INCF   7A,F
01BD:  MOVF   78,W
01BE:  MOVWF  30
01BF:  MOVF   7A,W
01C0:  MOVWF  31
01C1:  GOTO   1DB
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
01C2:  RLF    30,W
01C3:  MOVWF  36
01C4:  RLF    31,W
01C5:  MOVWF  37
01C6:  RLF    36,F
01C7:  RLF    37,F
01C8:  RLF    36,F
01C9:  RLF    37,F
01CA:  RLF    36,F
01CB:  RLF    37,F
01CC:  MOVLW  F0
01CD:  ANDWF  36,F
01CE:  MOVLW  41
01CF:  SUBWF  35,W
01D0:  ADDLW  0A
01D1:  ADDWF  36,W
01D2:  MOVWF  78
01D3:  MOVF   37,W
01D4:  MOVWF  7A
01D5:  BTFSC  03.0
01D6:  INCF   7A,F
01D7:  MOVF   78,W
01D8:  MOVWF  30
01D9:  MOVF   7A,W
01DA:  MOVWF  31
....................  
....................             c = s[index++];c = toupper(c); 
01DB:  MOVF   34,W
01DC:  INCF   34,F
01DD:  ADDWF  2E,W
01DE:  MOVWF  04
01DF:  BCF    03.7
01E0:  BTFSC  2F.0
01E1:  BSF    03.7
01E2:  MOVF   00,W
01E3:  MOVWF  35
01E4:  SUBLW  60
01E5:  BTFSC  03.0
01E6:  GOTO   1EE
01E7:  MOVF   35,W
01E8:  SUBLW  7A
01E9:  BTFSS  03.0
01EA:  GOTO   1EE
01EB:  MOVF   35,W
01EC:  ANDLW  DF
01ED:  GOTO   1EF
01EE:  MOVF   35,W
01EF:  MOVWF  35
01F0:  GOTO   191
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
01F1:  MOVF   33,W
01F2:  SUBLW  0A
01F3:  BTFSS  03.2
01F4:  GOTO   1FC
01F5:  DECFSZ 32,W
01F6:  GOTO   1FC
....................       result = -result; 
01F7:  COMF   30,F
01F8:  COMF   31,F
01F9:  INCF   30,F
01FA:  BTFSC  03.2
01FB:  INCF   31,F
....................  
....................    return(result); 
01FC:  MOVF   30,W
01FD:  MOVWF  78
01FE:  MOVF   31,W
01FF:  MOVWF  79
0200:  BCF    0A.3
0201:  BCF    0A.4
0202:  GOTO   3EE (RETURN)
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #if defined(__PCD__) 
....................  
.................... char * itoa(signed int48 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int48 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... char * itoa(signed int64 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int64 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................       
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1;         
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................              
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #endif 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #FUSES XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NODEBUG, NOCPD 
.................... #use delay(crystal=4000000) 
*
000F:  MOVLW  38
0010:  MOVWF  04
0011:  BCF    03.7
0012:  MOVF   00,W
0013:  BTFSC  03.2
0014:  GOTO   023
0015:  MOVLW  01
0016:  MOVWF  78
0017:  CLRF   77
0018:  DECFSZ 77,F
0019:  GOTO   018
001A:  DECFSZ 78,F
001B:  GOTO   017
001C:  MOVLW  4A
001D:  MOVWF  77
001E:  DECFSZ 77,F
001F:  GOTO   01E
0020:  GOTO   021
0021:  DECFSZ 00,F
0022:  GOTO   015
0023:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
003C:  MOVLW  0F
003D:  BSF    03.5
003E:  ANDWF  08,W
003F:  IORLW  F0
0040:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0041:  BCF    03.5
0042:  BSF    08.2
....................    delay_cycles(1); 
0043:  NOP
....................    lcd_output_enable(1); 
0044:  BSF    08.0
....................    delay_cycles(1); 
0045:  NOP
....................    high = lcd_read_nibble(); 
0046:  CALL   030
0047:  MOVF   78,W
0048:  MOVWF  3F
....................        
....................    lcd_output_enable(0); 
0049:  BCF    08.0
....................    delay_cycles(1); 
004A:  NOP
....................    lcd_output_enable(1); 
004B:  BSF    08.0
....................    delay_us(1); 
004C:  NOP
....................    low = lcd_read_nibble(); 
004D:  CALL   030
004E:  MOVF   78,W
004F:  MOVWF  3E
....................        
....................    lcd_output_enable(0); 
0050:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0051:  MOVLW  0F
0052:  BSF    03.5
0053:  ANDWF  08,W
0054:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0055:  BCF    03.5
0056:  SWAPF  3F,W
0057:  MOVWF  77
0058:  MOVLW  F0
0059:  ANDWF  77,F
005A:  MOVF   77,W
005B:  IORWF  3E,W
005C:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0030:  MOVF   08,W
0031:  MOVWF  77
0032:  SWAPF  08,W
0033:  ANDLW  0F
0034:  MOVWF  78
....................   #endif 
0035:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0024:  SWAPF  3F,W
0025:  ANDLW  F0
0026:  MOVWF  77
0027:  MOVLW  0F
0028:  ANDWF  08,W
0029:  IORWF  77,W
002A:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
002B:  NOP
....................    lcd_output_enable(1); 
002C:  BSF    08.0
....................    delay_us(2); 
002D:  GOTO   02E
....................    lcd_output_enable(0); 
002E:  BCF    08.0
002F:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0036:  BSF    03.5
0037:  BCF    08.0
....................    lcd_rs_tris(); 
0038:  BCF    08.1
....................    lcd_rw_tris(); 
0039:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
003A:  BCF    03.5
003B:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
005D:  MOVF   78,W
005E:  MOVWF  3E
005F:  BTFSC  3E.7
0060:  GOTO   03C
....................    lcd_output_rs(address); 
0061:  BTFSS  3C.0
0062:  BCF    08.1
0063:  BTFSC  3C.0
0064:  BSF    08.1
....................    delay_cycles(1); 
0065:  NOP
....................    lcd_output_rw(0); 
0066:  BCF    08.2
....................    delay_cycles(1); 
0067:  NOP
....................    lcd_output_enable(0); 
0068:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0069:  SWAPF  3D,W
006A:  MOVWF  3E
006B:  MOVLW  0F
006C:  ANDWF  3E,F
006D:  MOVF   3E,W
006E:  MOVWF  3F
006F:  CALL   024
....................    lcd_send_nibble(n & 0xf); 
0070:  MOVF   3D,W
0071:  ANDLW  0F
0072:  MOVWF  3E
0073:  MOVWF  3F
0074:  CALL   024
0075:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0076:  MOVLW  28
0077:  MOVWF  2F
0078:  MOVLW  0C
0079:  MOVWF  30
007A:  MOVLW  01
007B:  MOVWF  31
007C:  MOVLW  06
007D:  MOVWF  32
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
007E:  BCF    08.0
....................    lcd_output_rs(0); 
007F:  BCF    08.1
....................    lcd_output_rw(0); 
0080:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0081:  MOVLW  0F
0082:  BSF    03.5
0083:  ANDWF  08,W
0084:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0085:  BCF    08.0
....................    lcd_rs_tris(); 
0086:  BCF    08.1
....................    lcd_rw_tris(); 
0087:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0088:  MOVLW  0F
0089:  BCF    03.5
008A:  MOVWF  38
008B:  CALL   00F
....................    for(i=1;i<=3;++i) 
008C:  MOVLW  01
008D:  MOVWF  2E
008E:  MOVF   2E,W
008F:  SUBLW  03
0090:  BTFSS  03.0
0091:  GOTO   09A
....................    { 
....................        lcd_send_nibble(3); 
0092:  MOVLW  03
0093:  MOVWF  3F
0094:  CALL   024
....................        delay_ms(5); 
0095:  MOVLW  05
0096:  MOVWF  38
0097:  CALL   00F
0098:  INCF   2E,F
0099:  GOTO   08E
....................    } 
....................     
....................    lcd_send_nibble(2); 
009A:  MOVLW  02
009B:  MOVWF  3F
009C:  CALL   024
....................    delay_ms(5); 
009D:  MOVLW  05
009E:  MOVWF  38
009F:  CALL   00F
....................    for(i=0;i<=3;++i) 
00A0:  CLRF   2E
00A1:  MOVF   2E,W
00A2:  SUBLW  03
00A3:  BTFSS  03.0
00A4:  GOTO   0B1
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A5:  MOVLW  2F
00A6:  ADDWF  2E,W
00A7:  MOVWF  04
00A8:  BCF    03.7
00A9:  MOVF   00,W
00AA:  MOVWF  33
00AB:  CLRF   3C
00AC:  MOVF   33,W
00AD:  MOVWF  3D
00AE:  CALL   036
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00AF:  INCF   2E,F
00B0:  GOTO   0A1
00B1:  BCF    0A.3
00B2:  BCF    0A.4
00B3:  GOTO   3D8 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
02B9:  DECFSZ 39,W
02BA:  GOTO   2BC
02BB:  GOTO   2BF
....................       address=LCD_LINE_TWO; 
02BC:  MOVLW  40
02BD:  MOVWF  3A
02BE:  GOTO   2C0
....................    else 
....................       address=0; 
02BF:  CLRF   3A
....................       
....................    address+=x-1; 
02C0:  MOVLW  01
02C1:  SUBWF  38,W
02C2:  ADDWF  3A,F
....................    lcd_send_byte(0,0x80|address); 
02C3:  MOVF   3A,W
02C4:  IORLW  80
02C5:  MOVWF  3B
02C6:  CLRF   3C
02C7:  MOVF   3B,W
02C8:  MOVWF  3D
02C9:  CALL   036
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
02CA:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
02CB:  MOVF   37,W
02CC:  XORLW  07
02CD:  BTFSC  03.2
02CE:  GOTO   2D9
02CF:  XORLW  0B
02D0:  BTFSC  03.2
02D1:  GOTO   2DE
02D2:  XORLW  06
02D3:  BTFSC  03.2
02D4:  GOTO   2E6
02D5:  XORLW  02
02D6:  BTFSC  03.2
02D7:  GOTO   2EC
02D8:  GOTO   2F1
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
02D9:  MOVLW  01
02DA:  MOVWF  38
02DB:  MOVWF  39
02DC:  CALL   2B9
02DD:  GOTO   2F6
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
02DE:  CLRF   3C
02DF:  MOVLW  01
02E0:  MOVWF  3D
02E1:  CALL   036
....................                      delay_ms(2); 
02E2:  MOVLW  02
02E3:  MOVWF  38
02E4:  CALL   00F
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
02E5:  GOTO   2F6
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
02E6:  MOVLW  01
02E7:  MOVWF  38
02E8:  MOVLW  02
02E9:  MOVWF  39
02EA:  CALL   2B9
02EB:  GOTO   2F6
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
02EC:  CLRF   3C
02ED:  MOVLW  10
02EE:  MOVWF  3D
02EF:  CALL   036
02F0:  GOTO   2F6
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
02F1:  MOVLW  01
02F2:  MOVWF  3C
02F3:  MOVF   37,W
02F4:  MOVWF  3D
02F5:  CALL   036
....................      #endif 
....................    } 
02F6:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #use rs232 (baud=9600,xmit=PIN_C6, rcv=PIN_C7, parity=N, stop=1)  // configuretion for serial communication 
....................  
.................... int counter=0;               // counter to be used  
.................... char strInput[4];              // string array for input characters  
.................... unsigned long inputString;    // inputString value to be used 
....................  
....................  
.................... void main() 
*
03C0:  MOVF   03,W
03C1:  ANDLW  1F
03C2:  MOVWF  03
03C3:  MOVLW  19
03C4:  BSF    03.5
03C5:  MOVWF  19
03C6:  MOVLW  A6
03C7:  MOVWF  18
03C8:  MOVLW  90
03C9:  BCF    03.5
03CA:  MOVWF  18
03CB:  CLRF   26
03CC:  BSF    03.5
03CD:  BSF    1F.0
03CE:  BSF    1F.1
03CF:  BSF    1F.2
03D0:  BCF    1F.3
03D1:  MOVLW  07
03D2:  MOVWF  1C
03D3:  BCF    03.7
.................... { 
.................... lcd_init();  
*
03D7:  GOTO   076
.................... delay_ms(10);  
03D8:  MOVLW  0A
03D9:  MOVWF  38
03DA:  CALL   00F
....................  
.................... while(1) 
.................... {  
....................    if(kbhit())                        // if data has been received 
03DB:  BTFSS  0C.5
03DC:  GOTO   426
....................    { 
....................    char i = getc();                   // UART read 
03DD:  BTFSS  0C.5
03DE:  GOTO   3DD
03DF:  MOVF   1A,W
03E0:  MOVWF  2D
....................     if (i=='*')                     // special character for serial input. If the received character is *,then this condition is called 
03E1:  MOVF   2D,W
03E2:  SUBLW  2A
03E3:  BTFSS  03.2
03E4:  GOTO   41F
....................     { 
.................... counter = 0;                       // counter to be zero again  
03E5:  CLRF   26
.................... printf(strInput);                    // print string array to the screen  
03E6:  MOVLW  27
03E7:  MOVWF  04
03E8:  BCF    03.7
03E9:  GOTO   0B4
.................... inputString = atol(strInput);      // change string array to long variable  
03EA:  CLRF   2F
03EB:  MOVLW  27
03EC:  MOVWF  2E
03ED:  GOTO   0CD
03EE:  MOVF   79,W
03EF:  MOVWF  2C
03F0:  MOVF   78,W
03F1:  MOVWF  2B
.................... inputString = inputString*2;        // multiply inputString by 2   
03F2:  BCF    03.0
03F3:  RLF    2B,F
03F4:  RLF    2C,F
.................... printf("sayi %lu",inputString);           // print inputString value to the screen 
03F5:  MOVLW  04
03F6:  BSF    03.6
03F7:  MOVWF  0D
03F8:  MOVLW  00
03F9:  MOVWF  0F
03FA:  BCF    03.0
03FB:  MOVLW  05
03FC:  BCF    03.6
03FD:  MOVWF  2E
03FE:  GOTO   203
03FF:  MOVLW  10
0400:  MOVWF  04
0401:  MOVF   2C,W
0402:  MOVWF  2F
0403:  MOVF   2B,W
0404:  MOVWF  2E
0405:  GOTO   25E
.................... printf(LCD_PUTC,"\fValue=%lu",inputString);     // print inputString value to the LCD  
0406:  MOVLW  09
0407:  BSF    03.6
0408:  MOVWF  0D
0409:  MOVLW  00
040A:  MOVWF  0F
040B:  BCF    03.0
040C:  MOVLW  07
040D:  BCF    03.6
040E:  MOVWF  2E
040F:  GOTO   2F7
0410:  MOVLW  10
0411:  MOVWF  04
0412:  MOVF   2C,W
0413:  MOVWF  2F
0414:  MOVF   2B,W
0415:  MOVWF  2E
0416:  GOTO   350
.................... memset(strInput, 0, 4);                // clear the string array else 
0417:  MOVLW  27
0418:  MOVWF  04
0419:  BCF    03.7
041A:  CLRF   77
041B:  MOVLW  04
041C:  MOVWF  78
041D:  GOTO   3B5
....................     } 
041E:  GOTO   426
....................     else 
....................     { 
.................... strInput[counter]=i;            // attend input character to the string array 
041F:  MOVLW  27
0420:  ADDWF  26,W
0421:  MOVWF  04
0422:  BCF    03.7
0423:  MOVF   2D,W
0424:  MOVWF  00
.................... counter++;                      // increase the counter by 1 
0425:  INCF   26,F
....................             } 
....................          } 
0426:  GOTO   3DB
....................        } 
....................      } 
....................  
0427:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
